"use strict";(self.webpackChunknan=self.webpackChunknan||[]).push([[253],{9941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"virtual/references","title":"references","description":"all","source":"@site/docs/virtual/references.md","sourceDirName":"virtual","slug":"/virtual/references","permalink":"/docs/virtual/references","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/virtual/references.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"lib","permalink":"/docs/virtual/lib"}}');var r=t(4848),i=t(8453);const l={sidebar_position:3},c=void 0,a={},d=[{value:"all",id:"all",level:3},{value:"types",id:"types",level:3},{value:"push",id:"push",level:3},{value:"pop",id:"pop",level:3},{value:"add",id:"add",level:3},{value:"sub",id:"sub",level:3},{value:"mul",id:"mul",level:3},{value:"div",id:"div",level:3},{value:"inc",id:"inc",level:3},{value:"dec",id:"dec",level:3},{value:"xor",id:"xor",level:3},{value:"or",id:"or",level:3},{value:"not",id:"not",level:3},{value:"and",id:"and",level:3},{value:"ls",id:"ls",level:3},{value:"rs",id:"rs",level:3},{value:"jmp",id:"jmp",level:3},{value:"ret",id:"ret",level:3},{value:"test",id:"test",level:3},{value:"j&lt;cond&gt;",id:"jcond",level:3},{value:"mov",id:"mov",level:3},{value:"mset",id:"mset",level:3},{value:"putc",id:"putc",level:3},{value:"putc",id:"putc-1",level:3},{value:"puts",id:"puts",level:3},{value:"call",id:"call",level:3},{value:"swst",id:"swst",level:3},{value:"usage const dest",id:"usage-const-dest",level:4},{value:"usage stack dest",id:"usage-stack-dest",level:4},{value:"write",id:"write",level:3},{value:"read",id:"read",level:3},{value:"open",id:"open",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",del:"del",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"all",children:"all"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-asm",children:"\t<real_bit>\r\n\t-stack-\r\n\tpush <type:1b> <value:4b>\r\n\tpop -no args-\r\n\tadd <type:1b> <type:1b>\r\n\tsub <type:1b> <type:1b>\r\n\tmul <type:1b> <type:1b>\r\n\tdiv <type:1b> <type:1b>\r\n\tinc <type:1b>\r\n\tdec <type:1b>\r\n\txor <type:1b> <type:1b>\r\n\tor  <type:1b> <type:1b>\r\n\tnot <type:1b>\r\n\tand <type:1b> <type:1b>\r\n\tls  <type:1b> <type:1b>\r\n\trs  <type:1b> <type:1b>\r\n\tjmp <offset:4b>\r\n\tret -no args-\r\n\ttest <type:1b> <type:1b>\r\n\tj<if> <offset:4b>\r\n\tmov <type:1b> <address:4b>\r\n\tmset <start> <size> <value> \r\n\tputc <char:2b>\r\n\tputi -stack head-\r\n\tputs <address:4b>\r\n\tcall <proc-idx:4b>\r\n\tswst <?use_stack:1b> <idx:4b>\r\n\t| swst 'true' <stack_type:1b> -idx:4b-\r\n\t| swst 'false' <idx:4b>\r\n\twrite <address:4b>\r\n\tread <address:4b> <chunsize:2b>\r\n\t\t!uses simple char for path\r\n\topen <address:4b> <flags:4b>\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"next addition float math"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"types",children:"types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instruction_NUM  - simple number"}),"\n",(0,r.jsx)(n.li,{children:"Instruction_MEM  - (unpack memory value) pointer offset to heap data"}),"\n",(0,r.jsx)(n.li,{children:"Instruction_RMEM - (raw memory pointer) pointer offset to heap data"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"push",children:"push"}),"\n",(0,r.jsx)(n.p,{children:"Adds to stack n value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// push <type:1b> <value:4b>\r\n\tbuilder << Instruction_PUSH << Instruction_NUM << 2; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"pop",children:"pop"}),"\n",(0,r.jsx)(n.p,{children:"Removes top element from stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// pop [no args]\r\n\tbuilder << Instruction_POP; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"add",children:"add"}),"\n",(0,r.jsx)(n.p,{children:"Math operation add, adds to numbers from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// add <type:1b> <type:1b>\r\n\tbuilder << Instruction_ADD << Instruction_NUM << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"sub",children:"sub"}),"\n",(0,r.jsx)(n.p,{children:"Math operation sub, subs to numbers from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// sub <type:1b> <type:1b>\r\n\tbuilder << Instruction_SUB << Instruction_NUM << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"mul",children:"mul"}),"\n",(0,r.jsx)(n.p,{children:"Math operation mul, muls to numbers from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// mul <type:1b> <type:1b>\r\n\tbuilder << Instruction_MUL << Instruction_NUM << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"div",children:"div"}),"\n",(0,r.jsx)(n.p,{children:"Math operation div, divs to numbers from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// div <type:1b> <type:1b>\r\n\tbuilder << Instruction_DIV << Instruction_NUM << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"inc",children:"inc"}),"\n",(0,r.jsx)(n.p,{children:"Math operation inc, increases the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// inc <type:1b>\r\n\tbuilder << Instruction_INC << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"dec",children:"dec"}),"\n",(0,r.jsx)(n.p,{children:"Math operation dec, reduces the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// dev <type:1b>\r\n\tbuilder << Instruction_DEC << Instruction_NUM; \n"})}),"\n",(0,r.jsx)(n.h3,{id:"xor",children:"xor"}),"\n",(0,r.jsx)(n.p,{children:"Math operation xor, 'xor'es the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// xor <type:1b> <type:1b>\r\n\tbuilder << Instruction_XOR << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"or",children:"or"}),"\n",(0,r.jsx)(n.p,{children:"Math operation or, 'or'es the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// or <type:1b> <type:1b>\r\n\tbuilder << Instruction_OR << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"not",children:"not"}),"\n",(0,r.jsx)(n.p,{children:"Math operation not, invert the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// not <type:1b>\r\n\tbuilder << Instruction_NOT << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"and",children:"and"}),"\n",(0,r.jsx)(n.p,{children:"Math operation and, 'and'es the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// and <type:1b> <type:1b>\r\n\tbuilder << Instruction_AND << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ls",children:"ls"}),"\n",(0,r.jsx)(n.p,{children:"Math operation ls, binary left shift the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// ls <type:1b> <type:1b>\r\n\tbuilder << Instruction_LS << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rs",children:"rs"}),"\n",(0,r.jsx)(n.p,{children:"Math operation rs, binary right shift the value from stack.\r\nIf first argument type is MEM changes to poiner value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// rs <type:1b> <type:1b>\r\n\tbuilder << Instruction_RS << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"jmp",children:"jmp"}),"\n",(0,r.jsx)(n.p,{children:"jump with offset, uses integer for offset, can jump with negarive and positive offset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// jmp <offset:4b>\r\n\tbuilder << Instruction_JMP << 10;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ret",children:"ret"}),"\n",(0,r.jsx)(n.p,{children:"returns to last jump"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// ret [no args]\r\n\tbuilder << Instruction_RET;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test",children:"test"}),"\n",(0,r.jsx)(n.p,{children:"tests two numbers by bytes compare. Write to special register result"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// test <type:1b> <type:1b>\r\n\tbuilder << Instruction_TEST << Instruction_NUM << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"jcond",children:"j<cond>"}),"\n",(0,r.jsxs)(n.p,{children:["Like ",(0,r.jsx)(n.a,{href:"#jmp",children:"jump"}),", but uses special test register. If conditional match jump, else not.\r\nall variants:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JNE - jump if not equal"}),"\n",(0,r.jsx)(n.li,{children:"JEL - jump if equal and less"}),"\n",(0,r.jsx)(n.li,{children:"JEM - jump if equal and more"}),"\n",(0,r.jsx)(n.li,{children:"JM - jump if more"}),"\n",(0,r.jsx)(n.li,{children:"JL - jump if less"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// j<cond> <offset:4b>\r\n\tbuilder << Instruction_J[__] << 10;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mov",children:"mov"}),"\n",(0,r.jsx)(n.p,{children:"Moves from stack head to pointer offset, unsigned int value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// mov <type:1b> <offset:4b>\r\n\tbuilder << Instruction_MOV << Instruction_NUM << 0U;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mset",children:"mset"}),"\n",(0,r.jsx)(n.p,{children:"Sets pointer value with size and value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// mset <start:4b> <size:4b> <value:4b>\r\n\tbuilder << Instruction_MSET << 0U << sizeof(uint) << 0U;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"putc",children:"putc"}),"\n",(0,r.jsx)(n.p,{children:"Puts wchar_t to console"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// putc <char:2b>\r\n\tbuilder << Instruction_PUTC << L'a';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"putc-1",children:"putc"}),"\n",(0,r.jsx)(n.p,{children:"Puts integer to console from stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// puti -stack head-\r\n\tbuilder << Instruction_PUTI << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"puts",children:"puts"}),"\n",(0,r.jsx)(n.p,{children:"Puts wchar_t string to console ends with zero byte"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// puts <address:4b>\r\n\tbuilder << Instruction_PUTI << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"call",children:"call"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// call <proc-idx:4b>\r\n\tTODO NOT IMPL\n"})}),"\n",(0,r.jsx)(n.h3,{id:"swst",children:"swst"}),"\n",(0,r.jsx)(n.p,{children:"Open stream by destinator and sets current file stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// swst <?use_stack:1b> <idx:4b>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"usage-const-dest",children:"usage const dest"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// swst 'false' <idx:4b>\r\n\tbuilder << Instruction_SWST << (uint)false << 12U;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"usage-stack-dest",children:"usage stack dest"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t//  swst 'true' <stack_type:1b> -idx:4b-\r\n\tbuilder << Instruction_SWST << (uint)true << Instruction_NUM;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"write",children:"write"}),"\n",(0,r.jsx)(n.p,{children:"Writes to current stream char string"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'\t// write <address:4b>\r\n\tbuilder << Instruction_WRITE << 0U;\r\n\tbuilder += "Hellow";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"read",children:"read"}),"\n",(0,r.jsxs)(n.p,{children:["Reads from current stream char string with size (max chunk size = ",(0,r.jsx)(n.del,{children:"MAX_SHORT_VALUE"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"\t// read <address:4b> <chunsize:2b>\r\n\tbuilder << Instruction_READ << 0U << 15U;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"open",children:"open"}),"\n",(0,r.jsx)(n.p,{children:"Opens file - gets file destinator and push in stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'\t// open <address:4b> <flags:4b>\r\n\tbuilder << Instruction_OPEN << 0U << _O_RDWR;\r\n\tbuilder += "path/to/file";\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);